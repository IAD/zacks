// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	zacksclientmodels "github/IAD/zacks/internal/app/server/gen/client/zacksclientmodels"
)

// GetTickerReader is a Reader for the GetTicker structure.
type GetTickerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTickerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTickerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetTickerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetTickerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /{ticker} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetTickerOK creates a GetTickerOK with default headers values
func NewGetTickerOK() *GetTickerOK {
	return &GetTickerOK{}
}

/*GetTickerOK handles this case with default header values.

OK
*/
type GetTickerOK struct {
	Payload *zacksclientmodels.Rank
}

func (o *GetTickerOK) Error() string {
	return fmt.Sprintf("[GET /{ticker}][%d] getTickerOK  %+v", 200, o.Payload)
}

func (o *GetTickerOK) GetPayload() *zacksclientmodels.Rank {
	return o.Payload
}

func (o *GetTickerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(zacksclientmodels.Rank)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTickerNotFound creates a GetTickerNotFound with default headers values
func NewGetTickerNotFound() *GetTickerNotFound {
	return &GetTickerNotFound{}
}

/*GetTickerNotFound handles this case with default header values.

error
*/
type GetTickerNotFound struct {
	Payload *zacksclientmodels.Message
}

func (o *GetTickerNotFound) Error() string {
	return fmt.Sprintf("[GET /{ticker}][%d] getTickerNotFound  %+v", 404, o.Payload)
}

func (o *GetTickerNotFound) GetPayload() *zacksclientmodels.Message {
	return o.Payload
}

func (o *GetTickerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(zacksclientmodels.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTickerInternalServerError creates a GetTickerInternalServerError with default headers values
func NewGetTickerInternalServerError() *GetTickerInternalServerError {
	return &GetTickerInternalServerError{}
}

/*GetTickerInternalServerError handles this case with default header values.

error
*/
type GetTickerInternalServerError struct {
	Payload *zacksclientmodels.Message
}

func (o *GetTickerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /{ticker}][%d] getTickerInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTickerInternalServerError) GetPayload() *zacksclientmodels.Message {
	return o.Payload
}

func (o *GetTickerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(zacksclientmodels.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
