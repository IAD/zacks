// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetTicker get ticker API
*/
func (a *Client) GetTicker(params *GetTickerParams) (*GetTickerOK, *GetTickerNotFound, *GetTickerInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTickerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTicker",
		Method:             "GET",
		PathPattern:        "/{ticker}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTickerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetTickerOK:
		return v, nil, nil, nil
	case *GetTickerNotFound:
		return nil, v, nil, nil
	case *GetTickerInternalServerError:
		return nil, nil, v, nil
	default:
		return nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
GetTickerHistory get ticker history API
*/
func (a *Client) GetTickerHistory(params *GetTickerHistoryParams) (*GetTickerHistoryOK, *GetTickerHistoryNotFound, *GetTickerHistoryInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTickerHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTickerHistory",
		Method:             "GET",
		PathPattern:        "/{ticker}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTickerHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetTickerHistoryOK:
		return v, nil, nil, nil
	case *GetTickerHistoryNotFound:
		return nil, v, nil, nil
	case *GetTickerHistoryInternalServerError:
		return nil, nil, v, nil
	default:
		return nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
