// Code generated by go-swagger; DO NOT EDIT.

package zacksclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rank Zacks Rank
// swagger:model Rank
type Rank struct {

	// beta
	// Required: true
	Beta float64 `json:"beta"`

	// date received
	// Required: true
	// Format: date-time
	DateReceived strfmt.DateTime `json:"date_received"`

	// dividend amount
	// Required: true
	DividendAmount float64 `json:"dividend_amount"`

	// dividend percent
	// Required: true
	DividendPercent float64 `json:"dividend_percent"`

	// forward pe
	// Required: true
	ForwardPe float64 `json:"forward_pe"`

	// name
	// Required: true
	Name string `json:"name"`

	// peg ratio
	// Required: true
	PegRatio float64 `json:"peg_ratio"`

	// rank
	// Required: true
	Rank int64 `json:"rank"`

	// rank text
	// Required: true
	RankText string `json:"rank_text"`

	// score growth
	// Required: true
	ScoreGrowth int64 `json:"score_growth"`

	// score growth text
	// Required: true
	ScoreGrowthText string `json:"score_growth_text"`

	// score momentum
	// Required: true
	ScoreMomentum int64 `json:"score_momentum"`

	// score momentum text
	// Required: true
	ScoreMomentumText string `json:"score_momentum_text"`

	// score value
	// Required: true
	ScoreValue int64 `json:"score_value"`

	// score value text
	// Required: true
	ScoreValueText string `json:"score_value_text"`

	// score vgm
	// Required: true
	ScoreVgm int64 `json:"score_vgm"`

	// score vgm text
	// Required: true
	ScoreVgmText string `json:"score_vgm_text"`

	// ticker
	// Required: true
	Ticker string `json:"ticker"`
}

// Validate validates this rank
func (m *Rank) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateReceived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDividendAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDividendPercent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForwardPe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePegRatio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreGrowth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreGrowthText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreMomentum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreMomentumText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreValueText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreVgm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreVgmText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicker(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rank) validateBeta(formats strfmt.Registry) error {

	if err := validate.Required("beta", "body", float64(m.Beta)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateDateReceived(formats strfmt.Registry) error {

	if err := validate.Required("date_received", "body", strfmt.DateTime(m.DateReceived)); err != nil {
		return err
	}

	if err := validate.FormatOf("date_received", "body", "date-time", m.DateReceived.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateDividendAmount(formats strfmt.Registry) error {

	if err := validate.Required("dividend_amount", "body", float64(m.DividendAmount)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateDividendPercent(formats strfmt.Registry) error {

	if err := validate.Required("dividend_percent", "body", float64(m.DividendPercent)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateForwardPe(formats strfmt.Registry) error {

	if err := validate.Required("forward_pe", "body", float64(m.ForwardPe)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validatePegRatio(formats strfmt.Registry) error {

	if err := validate.Required("peg_ratio", "body", float64(m.PegRatio)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateRank(formats strfmt.Registry) error {

	if err := validate.Required("rank", "body", int64(m.Rank)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateRankText(formats strfmt.Registry) error {

	if err := validate.RequiredString("rank_text", "body", string(m.RankText)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateScoreGrowth(formats strfmt.Registry) error {

	if err := validate.Required("score_growth", "body", int64(m.ScoreGrowth)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateScoreGrowthText(formats strfmt.Registry) error {

	if err := validate.RequiredString("score_growth_text", "body", string(m.ScoreGrowthText)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateScoreMomentum(formats strfmt.Registry) error {

	if err := validate.Required("score_momentum", "body", int64(m.ScoreMomentum)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateScoreMomentumText(formats strfmt.Registry) error {

	if err := validate.RequiredString("score_momentum_text", "body", string(m.ScoreMomentumText)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateScoreValue(formats strfmt.Registry) error {

	if err := validate.Required("score_value", "body", int64(m.ScoreValue)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateScoreValueText(formats strfmt.Registry) error {

	if err := validate.RequiredString("score_value_text", "body", string(m.ScoreValueText)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateScoreVgm(formats strfmt.Registry) error {

	if err := validate.Required("score_vgm", "body", int64(m.ScoreVgm)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateScoreVgmText(formats strfmt.Registry) error {

	if err := validate.RequiredString("score_vgm_text", "body", string(m.ScoreVgmText)); err != nil {
		return err
	}

	return nil
}

func (m *Rank) validateTicker(formats strfmt.Registry) error {

	if err := validate.RequiredString("ticker", "body", string(m.Ticker)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rank) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rank) UnmarshalBinary(b []byte) error {
	var res Rank
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
