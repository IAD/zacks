// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/sirupsen/logrus"

	models "github/IAD/zacks/internal/app/server/gen/server/models"
)

// GetTickerOKCode is the HTTP code returned for type GetTickerOK
const GetTickerOKCode int = 200

/*GetTickerOK OK

swagger:response getTickerOK
*/
type GetTickerOK struct {

	/*
	  In: Body
	*/
	Payload *models.Rank `json:"body,omitempty"`
}

// NewGetTickerOKFunc is declaration for func that create response
type NewGetTickerOKFunc func() *GetTickerOK

// NewGetTickerOK creates GetTickerOK with default headers values
func NewGetTickerOK() *GetTickerOK {

	return &GetTickerOK{}
}

// WithPayload adds the payload to the get ticker o k response
func (o *GetTickerOK) WithPayload(payload *models.Rank) *GetTickerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ticker o k response
func (o *GetTickerOK) SetPayload(payload *models.Rank) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTickerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTickerNotFoundCode is the HTTP code returned for type GetTickerNotFound
const GetTickerNotFoundCode int = 404

/*GetTickerNotFound error

swagger:response getTickerNotFound
*/
type GetTickerNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Message `json:"body,omitempty"`
}

// NewGetTickerNotFoundFunc is declaration for func that create response
type NewGetTickerNotFoundFunc func() *GetTickerNotFound

// NewGetTickerNotFound creates GetTickerNotFound with default headers values
func NewGetTickerNotFound() *GetTickerNotFound {

	return &GetTickerNotFound{}
}

// WithPayload adds the payload to the get ticker not found response
func (o *GetTickerNotFound) WithPayload(payload *models.Message) *GetTickerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ticker not found response
func (o *GetTickerNotFound) SetPayload(payload *models.Message) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTickerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTickerInternalServerErrorCode is the HTTP code returned for type GetTickerInternalServerError
const GetTickerInternalServerErrorCode int = 500

/*GetTickerInternalServerError error

swagger:response getTickerInternalServerError
*/
type GetTickerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Message `json:"body,omitempty"`
}

// NewGetTickerInternalServerErrorFunc is declaration for func that create response
type NewGetTickerInternalServerErrorFunc func() *GetTickerInternalServerError

// NewGetTickerInternalServerError creates GetTickerInternalServerError with default headers values
func NewGetTickerInternalServerError() *GetTickerInternalServerError {

	return &GetTickerInternalServerError{}
}

// WithPayload adds the payload to the get ticker internal server error response
func (o *GetTickerInternalServerError) WithPayload(payload *models.Message) *GetTickerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ticker internal server error response
func (o *GetTickerInternalServerError) SetPayload(payload *models.Message) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTickerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}
