// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"
	"runtime/debug"

	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/sirupsen/logrus"
)

// GetHandlerFunc turns a function with the right signature into a get handler
type GetHandlerFunc func(*GetParams, NewGetOKFunc) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHandlerFunc) Handle(params *GetParams, getOK NewGetOKFunc) middleware.Responder {
	return fn(params, getOK)
}

// GetHandler interface for that can handle valid get params
type GetHandler interface {
	Handle(*GetParams, NewGetOKFunc) middleware.Responder
}

// NewGet creates a new http.Handler for the get operation
func NewGet(ctx *middleware.Context, handler GetHandler) *Get {
	return &Get{Context: ctx, Handler: handler}
}

/*Get swagger:route GET / get

Get get API

*/
type Get struct {
	Context *middleware.Context
	Handler GetHandler
}

func (o *Get) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetParams()

	if err := o.Context.BindValidRequest(r, route, Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	// pass predefined values from middleware
	requestCtx := r.Context()
	logger := requestCtx.Value("logger").(*logrus.Entry)
	requestID := requestCtx.Value("requestID").(string)

	// pass body
	Params.RequestBody = requestCtx.Value("body").([]byte)

	Params.Scope = struct {
		Ctx       context.Context
		RequestID string
		Logger    *logrus.Entry
	}{
		Ctx:       requestCtx,
		RequestID: requestID,
		Logger:    logger,
	}

	defer func() {
		if rec := recover(); rec != nil {
			Params.Scope.Logger.Errorf("%s: %s", rec, debug.Stack())

			requestID, ok := requestCtx.Value("requestID").(string)
			if ok {
				rw.Header().Add("requestID", requestID)
			}

			rw.WriteHeader(http.StatusInternalServerError)

			o.Context.Respond(rw, r, route.Produces, route, json.RawMessage([]byte(`{"code":"panic","message":""}`)))
		}
	}()

	res := o.Handler.Handle(Params, NewGetOK) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)
}
