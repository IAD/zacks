// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/sirupsen/logrus"

	models "github/IAD/zacks/internal/app/server/gen/server/models"
)

// GetTickerHistoryOKCode is the HTTP code returned for type GetTickerHistoryOK
const GetTickerHistoryOKCode int = 200

/*GetTickerHistoryOK OK

swagger:response getTickerHistoryOK
*/
type GetTickerHistoryOK struct {

	/*
	  In: Body
	*/
	Payload models.RankCollection `json:"body,omitempty"`
}

// NewGetTickerHistoryOKFunc is declaration for func that create response
type NewGetTickerHistoryOKFunc func() *GetTickerHistoryOK

// NewGetTickerHistoryOK creates GetTickerHistoryOK with default headers values
func NewGetTickerHistoryOK() *GetTickerHistoryOK {

	return &GetTickerHistoryOK{}
}

// WithPayload adds the payload to the get ticker history o k response
func (o *GetTickerHistoryOK) WithPayload(payload models.RankCollection) *GetTickerHistoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ticker history o k response
func (o *GetTickerHistoryOK) SetPayload(payload models.RankCollection) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTickerHistoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.RankCollection, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		logrus.Panic(err) // let the recovery middleware deal with this
	}

}

// GetTickerHistoryNotFoundCode is the HTTP code returned for type GetTickerHistoryNotFound
const GetTickerHistoryNotFoundCode int = 404

/*GetTickerHistoryNotFound error

swagger:response getTickerHistoryNotFound
*/
type GetTickerHistoryNotFound struct {
}

// NewGetTickerHistoryNotFoundFunc is declaration for func that create response
type NewGetTickerHistoryNotFoundFunc func() *GetTickerHistoryNotFound

// NewGetTickerHistoryNotFound creates GetTickerHistoryNotFound with default headers values
func NewGetTickerHistoryNotFound() *GetTickerHistoryNotFound {

	return &GetTickerHistoryNotFound{}
}

// WriteResponse to the client
func (o *GetTickerHistoryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// GetTickerHistoryInternalServerErrorCode is the HTTP code returned for type GetTickerHistoryInternalServerError
const GetTickerHistoryInternalServerErrorCode int = 500

/*GetTickerHistoryInternalServerError error

swagger:response getTickerHistoryInternalServerError
*/
type GetTickerHistoryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Message `json:"body,omitempty"`
}

// NewGetTickerHistoryInternalServerErrorFunc is declaration for func that create response
type NewGetTickerHistoryInternalServerErrorFunc func() *GetTickerHistoryInternalServerError

// NewGetTickerHistoryInternalServerError creates GetTickerHistoryInternalServerError with default headers values
func NewGetTickerHistoryInternalServerError() *GetTickerHistoryInternalServerError {

	return &GetTickerHistoryInternalServerError{}
}

// WithPayload adds the payload to the get ticker history internal server error response
func (o *GetTickerHistoryInternalServerError) WithPayload(payload *models.Message) *GetTickerHistoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ticker history internal server error response
func (o *GetTickerHistoryInternalServerError) SetPayload(payload *models.Message) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTickerHistoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}
